import { execSync } from 'node:child_process';
import * as fs from 'node:fs';
import path from 'node:path';
import { ensureDir, writeFile } from 'fs-extra';
import { PACKAGE_NAME } from './package-info';

export function checkDependencies() {
	const isInstalled = (cmd: string) => {
		try {
			execSync(`command -v ${cmd}`, { stdio: 'ignore' });
			return true;
		} catch {
			return false;
		}
	};

	if (!isInstalled('proto')) {
		console.log('`proto` is not installed. It is required to proceed.');
		const installProto = 'curl -fsSL https://moonrepo.dev/install/proto.sh | $SHELL';
		execSync(installProto, { stdio: 'inherit' });
	}

	if (!isInstalled('moon')) {
		console.log('`moon` is not installed. Installing it using `proto`...');
		const protoPath = `${process.env.HOME}/.proto/bin/proto`;
		execSync(
			`${protoPath} plugin add moon "source:https://raw.githubusercontent.com/moonrepo/moon/master/proto-plugin.toml"`,
			{ stdio: 'inherit' },
		);
		execSync(`${protoPath} install moon`, { stdio: 'inherit' });
	}
}

export function createProjectFolder(destination: string) {
	if (!fs.existsSync(destination)) {
		fs.mkdirSync(destination, { recursive: true });
	}
}

export function initializePackage(destination: string, packageManager: string) {
	execSync(`${packageManager} init -y`, { cwd: destination, stdio: 'inherit' });
}

export function installSelf(destination: string, packageManager: string) {
	execSync(`${packageManager} add -D ${PACKAGE_NAME}`, { cwd: destination, stdio: 'inherit' });
}

export async function initializeProject(destination: string) {
	execSync(`ls -la ${destination}`, { stdio: 'inherit' });

	const workspaceYml = `
		# https://moonrepo.dev/docs/config/workspace
		$schema: 'https://moonrepo.dev/schemas/workspace.json'
		
		# Require a specific version of moon while running commands, otherwise fail.
		# versionConstraint: '>=1.0.0'
		
		# Extend and inherit an external configuration file. Must be a valid HTTPS URL or file system path.
		# The file below is generated by moon-launch so it can always be regenerated
		extends: "./workspace.base.yml"
		
		# REQUIRED: A map of all projects found within the workspace, or a list or file system globs.
		# When using a map, each entry requires a unique project ID as the map key, and a file system
		# path to the project folder as the map value. File paths are relative from the workspace root,
		# and cannot reference projects located outside the workspace boundary.
		projects
			- 'apps/*'
			- 'packages/*'
			# Libs are internally used projects. They can be either private packages or not packages at all
			- 'libs/*'

		generator:
			templates:
				- './node_modules/${PACKAGE_NAME}/templates'
	`;

	const moonDir = path.join(destination, '.moon');

	await ensureDir(moonDir);
	await writeFile(path.join(destination, '.moon', 'workspace.yml'), workspaceYml);
}

export function runMoonGenerateMonorepo(destination: string) {
	execSync(`cd ${destination} && moon generate monorepo`, { stdio: 'inherit' });
}
